package com.in28minutes.concurrency;

public class Counter {
	private int i = 0;
	private int j = 0;

	synchronized public void incrementI() {

		i++;
		// get i
		// increment
		// set i
	}

	public int getI() {
		return i;
	}

	synchronized public void incrementJ() {

		j++;
		// get j
		// increment
		// set j

	}

	public int getJ() {
		return j;

	}


package com.in28minutes.concurrency;

public class BiCounter {
	private int i = 0;
	private int j = 0;

	synchronized public void incrementI() {

		i++;
		// get i
		// increment
		// set i
	}

	public int getI() {
		return i;
	}

	synchronized public void incrementJ() {

		j++;
		// get i
		// increment
		// set i
	}

	public int getJ() {
		return j;

	}
}

package com.in28minutes.concurrency;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class BiCounterWithAtomicInteger {
	private AtomicInteger i = new AtomicInteger();
	private AtomicInteger j = new AtomicInteger();


	public void incrementI() {
		i.incrementAndGet();
	}

	public int getI() {
		return i.get();
	}

	public void incrementJ() {
		j.incrementAndGet();
	}
	public int getJ() {
		return j.get();

	}
}



1st:
package com.in28minutes.concurrency;

import java.util.Hashtable;
import java.util.Map;
import java.util.concurrent.atomic.LongAdder;

public class ConcurrentMapRunner {

	public static void main(String[] args) {
		Map<Character, LongAdder> occurances = new Hashtable<>();

		String str = "ABC ABCD ABCD";
		for (char character : str.toCharArray()) {
			LongAdder longAdder = occurances.get(character);
			if (longAdder == null) {
				longAdder = new LongAdder();
			}
			longAdder.increment();
			occurances.put(character, longAdder);
	}

		System.out.println(occurances);
	}
}

output:
{ =2, A=3, D=2, C=3, B=3}



package com.in28minutes.concurrency;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

public class CopyOnWriteArrayListRunner {

	public static void main(String[] args) {
		List<String> list = new CopyOnWriteArrayList<>();
		// Thread - 3
		list.add("Ant");
		list.add("Bat");
		list.add("Cat");

		// Thread - 10000
		for (String element : list) {
			System.out.println(element);
		}
	}

}

Output:
Ant
Bat
Cat
