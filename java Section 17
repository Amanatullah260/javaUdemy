package com.in28minutes.functionalprogramming;

import java.util.List;

public class FunctionalProgrammingRunner {

	public static void main(String[] args) {
		List<String> list = List.of("Apple", "Banana", "Cat", "Dog");

		for (String string : list) {
			System.out.println(string);
		}
	}

}

Output:
Apple
Banana
Cat
Dog



package com.in28minutes.functionalprogramming;

import java.util.List;

public class FunctionalProgrammingRunner {

	public static void main(String[] args) {
		List<String> list = List.of("Apple", "Banana", "Cat", "Dog");

		printWithFP(list);
	}

	private static void printBasic(List<String> list) {
		for (String string : list) {
			System.out.println(string);
		}
	}

	private static void printWithFP(List<String> list) {
		list.stream().forEach(element -> System.out.println("element -" + element));
	}
}


output:
element -Apple
element -Banana
element -Cat
element -Dog



package com.in28minutes.functionalprogramming;

import java.util.List;

public class FunctionalProgrammingRunner {

	public static void main(String[] args) {
		List<String> list = List.of("Apple", "Bat", "Cat", "Dog");

		printWithFPWithFiltering(list);
	}

	private static void printBasic(List<String> list) {
		for (String string : list) {
			System.out.println(string);
		}
	}

	private static void printWithFiltering(List<String> list) {
		for (String string : list) {
			if (string.endsWith("at")) {
				System.out.println(string);
			}
		}
	}

	private static void printWithFP(List<String> list) {
		list.stream().forEach(element -> System.out.println("element -" + element));
	}

	private static void printWithFPWithFiltering(List<String> list) {
		list.stream().filter(element -> element.endsWith("at"))
				.forEach(element -> System.out.println("element -" + element));

	}
}


output:
element -Bat
element -Cat



package com.in28minutes.functionalprogramming;

import java.util.List;

public class FPNumberRunner {

	public static void main(String[] args) {
		List<Integer> numbers = List.of(4, 6, 8, 13, 3, 15);
		numbers.stream().forEach(element -> System.out.println(element));

	}

}

output:
4
6
8
13
3
15



package com.in28minutes.functionalprogramming;

import java.util.List;

public class FPNumberRunner {

	public static void main(String[] args) {
		List<Integer> numbers = List.of(4, 6, 8, 13, 3, 15);
		numbers.stream().forEach(element -> System.out.println(element));

		int sum = 0;
		for (int number : numbers) {
			sum += number;
		}
	}

}



4
6
8
13
3
15



public static void main(String[] args) {
		List<Integer> numbers = List.of(4, 6, 8, 13, 3, 15);
		 numbers.stream()
		 .forEach(element -> System.out.println(element));

		int sum = numbers.stream().reduce(
				0,
				(number1, number2) -> number1 + number2
				);

	System.out.println(sum);
}

	private static int normalSum(List<Integer> numbers) {
		int sum = 0;
		for (int number : numbers) {
			sum += number;
	}
		return sum;
	}

}

output:
49


package com.in28minutes.functionalprogramming;

import java.util.List;

public class FPNumberRunner {

	public static void main(String[] args) {
		List<Integer> numbers = List.of(4, 6, 8, 13, 3, 15);
		// numbers.stream().forEach(element -> System.out.println(element));

		int sum = fpSum(numbers);

	System.out.println(sum);
}

private static int fpSum(List<Integer> numbers) {
	return numbers.stream().reduce(0, (number1, number2) -> {
		System.out.println(number1 + " " + number2);
		return number1 + number2;
	});
}

	private static int normalSum(List<Integer> numbers) {
		int sum = 0;
		for (int number : numbers) {
			sum += number;
	}
		return sum;
	}

}

output:
0 4
4 6
10 8
18 13
31 3
34 15
49


jshell> List<Integer> list = List.of(1,4,7,9);
list ==> [1, 4, 7, 9]

jshell> list.stream().forEach(
   ...> element -> System.out.println(element)
   ...> )
1
4
7
9

jshell> list.stream().filter(
   ...> element -> element%2 == 1)
$3 ==> java.util.stream.ReferencePipeline$2@46fbb2c1

jshell> list.stream().filter(
   ...> element -> element%2 == 1).
   ...> forEach(
   ...> element -> System.out.println(element))
1
7
9

jshell> list.stream().filter(element ->element%2==1).forEach(element->System.out.println(element))
1
7
9

jshell> list.stream().filter(element ->element%2==0).forEach(element->System.out.println(element))
4

jshell> List<Integer> numbers = List.of(3,5,6,7,8);
numbers ==> [3, 5, 6, 7, 8]

jshell> numbers.stream().sorted().forEach(e->System.out.println(e));
3
5
6
7
8

jshell> List<Integer> numbers = List.of(3,5,6,213,45,7);
numbers ==> [3, 5, 6, 213, 45, 7]

jshell>  numbers.stream().distinct().forEach(e->System.out.println(e));
3
5
6
213
45
7

jshell>  numbers.stream().sorted().sorted().forEach(e->System.out.println(e));
3
5
6
7
45
213

jshell>  numbers.stream().distinct().map(e -> e * e).forEach(e->System.out.println(e));
9
25
36
45369
2025
49

jshell> IntStream.range(1,10).forEach(P->System.out.println(P))
1
2
3
4
5
6
7
8
9

jshell> IntStream.range(1,11).forEach(P->System.out.println(P))
1
2
3
4
5
6
7
8
9
10

jshell> IntStream.range(1,11).map(e ->  e * e).forEach(P->System.out.println(P))
1
4
9
16
25
36
49
64
81
100

jshell> List.of("Apple", "Ant", "Bat").stream().map(s->s.toLowerCase()).forEach(P -> System.out.println(P))
apple
ant
bat

jshell>  List.of("Apple", "Ant", "Bat").stream().map(s->s.length()).forEach(P -> System.out.println(P))
5
3
3

jshell> IntStream.range(1,11).reduce(0 , (n1,n2) -> n1+n2)
$6 ==> 55

jshell> List.of(23,12,34,53).stream().max((n1,n2) -> Integer.compare(n1,n2))
$7 ==> Optional[53]

jshell> List.of(23,12,34,53).stream().min((n1,n2) -> Integer.compare(n1,n2)).get()
$8 ==> 12

jshell> List.of(23,12,34,53).stream().filter(e -> e%2==1).forEach(e -> System.out.println(e))
23
53

jshell> List.of(23,12,34,53).stream().filter(e -> e%2==1).collect(Collectors.toList())
$10 ==> [23, 53]

jshell> List.of(23,12,34,53).stream().filter(e -> e%2==0).collect(Collectors.toList())
$11 ==> [12, 34]

jshell> IntStream.range(1,11).map(e -> e * e)
$12 ==> java.util.stream.IntPipeline$4@6477463f

jshell> IntStream.range(1,11).map(e -> e * e).boxed().collect(Collectors.toList())
$13 ==> [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

jshell> List.of(23,45,67,12).stream().filter(n -> n%2==0).max( (n1,n2) -> Integer.compare(n1,n2) )
$14 ==> Optional[12]

jshell> $14.get()
$15 ==> 12

jshell> $14.isPresent()
$16 ==> true

jshell> List.of(23,45,67,12).stream().filter(n -> n%2==0).max( (n1,n2) -> Integer.compare(n1,n2) )
$17 ==> Optional[12]

jshell> List.of(23,45,67).stream().filter(n -> n%2==0).max( (n1,n2) -> Integer.compare(n1,n2) ).orElse(0)
$18 ==> 0

jshell> List.of(23,45,34).stream().filter(n -> n%2==0).max( (n1,n2) -> Integer.compare(n1,n2) ).orElse(0)
$19 ==> 34

jshell>


package com.in28minutes.functionalprogramming;

import java.util.List;

public class LambdaBehindTheScreensRunner {

	public static void main(String[] args) {
		List.of(23, 43, 34, 45, 36, 48).stream().filter(n -> n % 2 == 0).forEach(e -> System.out.println(e));

	}

}

output:
34
36
48



package com.in28minutes.functionalprogramming;

import java.util.List;
import java.util.function.Predicate;

	class EvenNumberPredicate implements Predicate<Integer> {

		@Override
		public boolean test(Integer number) {
			return number % 2 == 0;
		}
	}
public class LambdaBehindTheScreensRunner {

	public static void main(String[] args) {
		List.of(23, 43, 34, 45, 36, 48).stream().filter(n -> n % 2 == 0).forEach(e -> System.out.println(e));

		List.of(23, 43, 34, 45, 36, 48).stream().filter(new EvenNumberPredicate()).forEach(e -> System.out.println(e));

		// stream<T> filter(Predicate<? super T> predicate);
		// boolean test(T t);
	}

}

output:
34
36
48
34
36
48


public class LambdaBehindTheScreensRunner {

	public static void main(String[] args) {
		List.of(23, 43, 34, 45, 36, 48).stream().filter(n -> n % 2 == 0).map(n -> n * n)
				.forEach(e -> System.out.println(e));

		List.of(23, 43, 34, 45, 36, 48).stream().filter(new EvenNumberPredicate()).map(n -> n * n)
				.forEach(new SystemOutConsumer());
		// filter(new EvenNumberPredicate())
		// stream<T> filter(Predicate<? super T> predicate);
		// boolean test(T t);

		// .forEach

	}

}

output:
1156
1296
2304
1156
1296
2304




package com.in28minutes.functionalprogramming;

import java.util.List;

public class MethodReferencesRunner {

	public static void print(Integer number) {
		System.out.println(number);
	}

	public static void main(String[] args) {
		List.of("Ant", "Bat", "Cat", "Dog", "Elephant").stream().map(s -> s.length())
				.forEach(s -> MethodReferencesRunner.print(s));

		List.of("Ant", "Bat", "Cat", "Dog", "Elephant").stream().map(String::length)
				.forEach(MethodReferencesRunner::print);

	}

}

output:
3
3
3
3
8
3
3
3
3
8



public static void main(String[] args) {
		List.of("Ant", "Bat", "Cat", "Dog", "Elephant").stream().map(s -> s.length())
				.forEach(s -> MethodReferencesRunner.print(s));

		List.of("Ant", "Bat", "Cat", "Dog", "Elephant").stream().map(String::length)
				.forEach(MethodReferencesRunner::print);

		Integer max = List.of(23, 45, 34).stream().filter(n -> n % 2 == 0).max((n1, n2) -> Integer.compare(n1, n2))
				.orElse(0);
		System.out.println(max);

	}

}

output:
3
3
3
3
8
3
3
3
3
8
34
