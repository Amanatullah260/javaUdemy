jshell> Byte.SIZE
$1 ==> 8

jshell> Byte.BYTES
$2 ==> 1

jshell> Byte.MAX_VALUE
$3 ==> 127

jshell> Byte.MIN_VALUE
$4 ==> -128

jshell> Short.BYTES
$5 ==> 2

jshell> Integer.BYTES
$6 ==> 4

jshell> Long.BYTES
$7 ==> 8

jshell> Integer.MAX_VALUE
$8 ==> 2147483647

jshell> int i = 1000;
i ==> 1000

jshell> long l = 500000000;
l ==> 500000000

jshell> long l = 50000000000l;
l ==> 50000000000

jshell> i = (int) l
i ==> -1539607552

jshell> l = i
l ==> -1539607552

jshell>  int eight = 010;
eight ==> 8

jshell> int eight = 101;
eight ==> 101

jshell> int sixteen = 0x10;
sixteen ==> 16

jshell> int fifteen = 0xf;
fifteen ==> 15

jshell> int big = 0xBBAACC;
big ==> 12298956

jshell> byte b = 127;
b ==> 127

jshell> Short.MAX_VALUE
$20 ==> 32767

jshell> int i = 3456;
i ==> 3456

jshell> short s = (short) i
s ==> 3456

jshell> int i1 = s
i1 ==> 3456

jshell> int i = 10;
i ==> 10

jshell> int j = i++;
j ==> 10

jshell> i
i ==> 11

jshell> int i = 10;
i ==> 10

jshell> int j = ++i;
j ==> 11

jshell> i
i ==> 11

jshell> int i = 10;
i ==> 10

jshell> int j = i--;
j ==> 10

jshell> i
i ==> 9

jshell> int i = 10;
i ==> 10

jshell> int j = --i;
j ==> 9

jshell> i
i ==> 9

jshell>

public class BiNumberRunner {

	public static void main(String[] args) {

		BiNumber numbers = new BiNumber(2, 3);

		System.out.println(numbers.add());//2+3
		System.out.println(numbers.multiply());//2*3

		numbers.doubleValue();// double both numbers

		System.out.println(numbers.getNumber1());//4
		System.out.println(numbers.getNumber2());//6

	}

}


package com.in28minutes.primitive.datatypes;

public class BiNumber {
	private int number1;
	private int number2;

	public int getNumber1() {
		return number1;
	}

	public void setNumber1(int number1) {
		this.number1 = number1;
	}

	public int getNumber2() {
		return number2;
	}

	public void setNumber2(int number2) {
		this.number2 = number2;
	}

	public BiNumber(int number1, int number2) {
		this.number1 = number1;
		this.number2 = number2;

	}

	public int add() {
		return number1 + number2;
	}

	public int multiply() {
		return number1 * number2;
	}

	public void doubleValue() {
		this.number1 *= 2;
		this.number2 *= 2;

	}
}

output:
5
6
4
6
jshell> 34.5
$1 ==> 34.5

jshell> 34.56789
$2 ==> 34.56789

jshell> float f = 34.5f
f ==> 34.5

jshell> float f = 34.5F
f ==> 34.5

jshell> double db1 = 34.56789
db1 ==> 34.56789


jshell> float f2 = (float)db1
f2 ==> 34.56789

jshell> db1++
$7 ==> 34.56789

jshell> db1--
$8 ==> 35.56789

jshell> db1% 5
$9 ==> 4.5678899999999985


jshell> int i = (int) f2
i ==> 34

jshell> float f = i;
f ==> 34.0

jshell> 34.56789+34.5678
$12 ==> 69.13569

jshell> new BigDecimal("34.567876");
$13 ==> 34.567876

jshell> BigDecimal number1 = new BigDecimal("34.56789876");
number1 ==> 34.56789876

jshell> BigDecimal number2 = new BigDecimal("34.2234");
number2 ==> 34.2234

jshell> number1.add(number2);
$16 ==> 68.79129876

jshell> BigDecimal number3 = number1.add(number2);
number3 ==> 68.79129876

jshell> number1
number1 ==> 34.56789876

jshell> number1
number1 ==> 34.56789876

jshell> number1.
abs(                     add(                     byteValue()              byteValueExact()
compareTo(               divide(                  divideAndRemainder(      divideToIntegralValue(
doubleValue()            equals(                  floatValue()             getClass()
hashCode()               intValue()               intValueExact()          longValue()
longValueExact()         max(                     min(                     movePointLeft(
movePointRight(          multiply(                negate(                  notify()
notifyAll()              plus(                    pow(                     precision()
remainder(               round(                   scale()                  scaleByPowerOfTen(
setScale(                shortValue()             shortValueExact()        signum()
sqrt(                    stripTrailingZeros()     subtract(                toBigInteger()
toBigIntegerExact()      toEngineeringString()    toPlainString()          toString()
ulp()                    unscaledValue()          wait(
jshell>  BigDecimal number1 = new BigDecimal("34.56789876");
number1 ==> 34.56789876

jshell> BigDecimal number3 = number1.add(number2);
number3 ==> 68.79129876

jshell>  BigDecimal number1 = new BigDecimal("34.2234");
number1 ==> 34.2234

jshell>  BigDecimal number10 = new BigDecimal(34.56789878);
number10 ==> 34.56789878000000015845216694287955760955810546875

jshell>  BigDecimal number11 = new BigDecimal(34.56789876);
number11 ==> 34.56789875999999850364474696107208728790283203125

jshell>  BigDecimal number1 = new BigDecimal("11.5");
number1 ==> 11.5

jshell>  BigDecimal number2 = new BigDecimal("23.45678");
number2 ==> 23.45678
jshell> BigDecimal number10 = new BigDecimal("34.56789");
number10 ==> 34.56789

jshell> BigDecimal number11 = new BigDecimal("23.45678");
number11 ==> 23.45678

jshell> number10.add(number11)
$7 ==> 58.02467

jshell> number10.multiply(number11)
$8 ==> 810.8513907942

jshell>  BigDecimal number2 = new BigDecimal("20.45678");
number2 ==> 20.45678

jshell> number.add(number2)
$10 ==> 43.91356

jshell> int i = 5
i ==> 5


jshell> number.add(new BigDecimal(i))
$12 ==> 28.45678
