package com.in28minutes.oops.level2;

public class fanRunner {

	public static void main(String[] args) {
		Fan fan = new Fan("Manufacture 1", 0.34567, "GREEN");

		System.out.println(fan );
	}

}
package com.in28minutes.oops.level2;

public class Fan {

	// state
	private String make;
	private double radius;
	private String color;

	private boolean isOn;
	private byte speed;// 0 to 5

	// creation
	public Fan(String make, double radius, String color) {
		this.make = make;
		this.radius = radius;
		this.color = color;
	}

	// print the state
	@Override
	public String toString() {
		return String.format("make -%s, radius -%f, color - %s, isOn -%b , speed -%d ", make, radius, color, isOn,
				speed);
	}
}

output:
make -Manufacture 1, radius -0.345670, color - GREEN, isOn -false , speed -0



Fan fan = new Fan("Manufacture 1", 0.34567, "GREEN");
		fan.isOn(false);
		System.out.println(fan);
	}
// isOn
	public void isOn(boolean isOn) {
		this.isOn = isOn;
	}
OUTPUT:
make -Manufacture 1, radius -0.345670, color - GREEN, isOn -false , speed -0



                  {
                  Fan fan = new Fan("Manufacture 1", 0.34567, "GREEN");
		fan.isOn(true);
		System.out.println(fan);
	}


output:
make -Manufacture 1, radius -0.345670, color - GREEN, isOn -true , speed -0



      


		this.isOn = true;
	}

	public void switchOff() {
		this.isOn = false;
	}

        2nd: 
            Fan fan = new Fan("Manufacture 1", 0.34567, "GREEN");
		fan.switchOn();
		System.out.println(fan);
	}
output:
make -Manufacture 1, radius -0.345670, color - GREEN, isOn -true , speed -0




}


        Fan fan = new Fan("Manufacture 1", 0.34567, "GREEN");
		fan.switchOn();
		System.out.println(fan);
		fan.switchOff();
		System.out.println(fan);
	}
 
output:
make -Manufacture 1, radius -0.345670, color - GREEN, isOn -true , speed -0 
make -Manufacture 1, radius -0.345670, color - GREEN, isOn -false , speed -0 



                fan.switchOn();
		fan.setSpeed((byte) 5);
		System.out.println(fan);
		fan.switchOff();
		System.out.println(fan); 

}

	public void setSpeed(byte speed) {
		this.speed = speed;
	}

output:
make -Manufacture 1, radius -0.345670, color - GREEN, isOn -true , speed -5 
make -Manufacture 1, radius -0.345670, color - GREEN, isOn -false , speed -5 




public void switchOn() {
		this.isOn = true;
		setSpeed((byte) 5);
	}

	public void switchOff() {
		this.isOn = false;
		setSpeed((byte) 0);
	}
output:
make -Manufacture 1, radius -0.345670, color - GREEN, isOn -true , speed -5 
make -Manufacture 1, radius -0.345670, color - GREEN, isOn -false , speed -0 



         {
             System.out.println(fan);
		fan.setSpeed((byte) 3);
		System.out.println(fan);
		fan.switchOff();
		System.out.println(fan);
	}
output:
make -Manufacture 1, radius -0.345670, color - GREEN, isOn -true , speed -5 
make -Manufacture 1, radius -0.345670, color - GREEN, isOn -true , speed -3 
make -Manufacture 1, radius -0.345670, color - GREEN, isOn -false , speed -0 


RectangleRunner:
                1st:
               package com.in28minutes.oops.level2;

                public class RectangleRunner {

	     public static void main(String[] args) {
		Rectangle rectangle = new Rectangle(12, 23);
		System.out.println(rectangle);
		rectangle.setWidth(25);
		System.out.println(rectangle);

	}
Rectangle.java:
            2nd:
            package com.in28minutes.oops.level2;

          public class Rectangle {

	// state
	private int length;
	private int width;

	// creation
	public Rectangle(int length, int width) {
		this.length = length;
		this.width = width;
	}

	public int getLength() {
		return length;
	}

	public void setLength(int length) {
		this.length = length;
	}

	public int getWidth() {
		return width;
	}

	public void setWidth(int width) {
		this.width = width;
	}

	public int area() {
		return length * width;
	}
	// operations

	public int perimeter() {
		return 2 * (length + width);
	}

	@Override
	public String toString() {
		return String.format("length -%d width -%d area -%d perimeter -%d", length, width, area(), perimeter());
	}

	// public String toString()
}

OUTPUT:
length -12 width -23 area -276 perimeter -70
length -12 width -25 area -300 perimeter -74

1ST:     package com.in28minutes.oops.level2;

public class CustomerRunner {

	public static void main(String[] args) {

		Address homeAddress = new Address("line1", "Hyderabad", "500035");
		Customer customer = new Customer("Ranga", homeAddress);
		Address workAddress = new Address("line1 for work", "Hyderabad", "5000");
		customer.setWorkAdress(workAddress);

		System.out.println(customer);
	}
}

2ND:        package com.in28minutes.oops.level2;

public class Customer {
	// state
	private String name;
	private Address homeAddress;
	private Address workAdress;

//creating
	public Address getHomeAddress() {
		return homeAddress;
	}

	public void setHomeAddress(Address homeAddress) {
		this.homeAddress = homeAddress;
	}

	public Address getWorkAdress() {
		return workAdress;
	}

	public void setWorkAdress(Address workAdress) {
		this.workAdress = workAdress;
	}

	@Override
	public String toString() {
		return String.format("name - [%s] home address - [%s] work address - [%s]", name, homeAddress,
				getHomeAddress());
	}
//creating
	public Customer(String name, Address homeAddress) {
		this.name = name;
		this.homeAddress = homeAddress;
	}

//operations

}

3RD:        package com.in28minutes.oops.level2;

public class Address {
	private String line1;
	private String city;
	private String zip;

//creation
	public Address(String line1, String city, String zip) {
		super();
		this.line1 = line1;
		this.city = city;
		this.zip = zip;
	}
@Override
public String toString() {
	return line1 + " " + city + " " + zip;
}
}
OUTPUT:
name - [Ranga] home address - [line1 Hyderabad 500035] work address - [line1 Hyderabad 500035]




Customer customer = new Customer("Ranga", homeAddress);
		System.out.println(customer);
		Address workAddress = new Address("line1 for work", "Hyderabad", "5000");
		customer.setWorkAdress(workAddress);
otput:
name - [Ranga] home address - [line1 Hyderabad 500035] work address - [line1 Hyderabad 500035]
name - [Ranga] home address - [line1 Hyderabad 500035] work address - [line1 Hyderabad 500035]


1ST:package com.in28minutes.oops.level2;

public class BookRunner {

	public static void main(String[] args) {
		Book book = new Book(123, "Object Oriented Programming with java", "Ranga");
		book.addReview(new Review(10, "Great Book", 5));
		book.addReview(new Review(101, "Awesome", 5));

		System.out.println(book);
	}

}


2ND:package com.in28minutes.oops.level2;

import java.util.ArrayList;

public class Book {

	private int id;
	private String name;
	private String author;
	private ArrayList<Review> reviews = new ArrayList<>();

	public Book(int id, String name, String author) {
		this.id = id;
		this.name = name;
		this.author = author;
	}

	public void addReview(Review review) {
		this.reviews.add(review);
	}

	@Override
	public String toString() {
		return String.format("id =%d name = %s author = %s Reviews = [%s]", id, name, author, reviews);
	}
}

3RD:package com.in28minutes.oops.level2;

public class Review {

	private int id;
	private String description;
	private int rating;

	public Review(int id, String description, int rating) {
		this.id = id;
		this.description = description;
		this.rating = rating;
	}

	@Override
	public String toString() {
		return id + " " + description + " " + rating;
	}
}


OUTPUT:
id =123 name = Object Oriented Programming with java author = Ranga Reviews = [[10 Great Book 5, 101 Awesome 5]]




1st:
package com.in28minutes.oops.level2.inheritance;

public class Person extends Object {
	private String name;
	private String email;
	private String phoneNumber;

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPhoneNumber() {
		return phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}


	@Override
	public String toString() {
		return name + "#" + email + "#" + phoneNumber;
	}

}

output:
null#null#null
null#null#null


2ND:
package com.in28minutes.oops.level2.inheritance;

public class StudentRunner {

	public static void main(String[] args) {
		// Student student = new Student();
		// student.setName("Ranga");
		// student.setEmail("in28minutes@gmail.com");

		Person person = new Person();
		person.setName("Ranga");
		person.setEmail("ranga@in28minutes.com");
		person.setPhoneNumber("123-456-7890");
		String value = person.toString();
		System.out.println(value);
		System.out.println(person);

	}

}

OUTPUT:
Ranga#ranga@in28minutes.com#123-456-7890
Ranga#ranga@in28minutes.com#123-456-7890


3RD:
package com.in28minutes.oops.level2.inheritance;

public class Person extends Object {
	private String name;
	private String email;
	private String phoneNumber;

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPhoneNumber() {
		return phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}




}

OUTPUT:
com.in28minutes.oops.level2.inheritance.Person@41a4555e
com.in28minutes.oops.level2.inheritance.Person@41a4555e
 
 1st:package com.in28minutes.oops.level2;

public abstract class AbstractRecipe {

	public void execute() {
		getReady();
		doTheDish();
		cleanup();
	}

	abstract void getReady();

	abstract void doTheDish();

	abstract void cleanup();
	// prepare
	// recipe
	// cleanup
}

2nd:package com.in28minutes.oops.level2;

public class Recipe1 extends AbstractRecipe {

	@Override
	void getReady() {
		System.out.println("Get the raw materials");
		System.out.println("Get the utensile");

	}

	@Override
	void doTheDish() {
		System.out.println("do the dish");

	}

	@Override
	void cleanup() {
		System.out.println("Cleanup the utensils");

	}

}


3rd:package com.in28minutes.oops.level2;

public class RecipeRunner {

	public static void main(String[] args) {
		Recipe1 recipe = new Recipe1();
		recipe.execute();

	}

}

OUTPUT:
Get the raw materials
Get the utensile
do the dish
Cleanup the utensils





package com.in28minutes.oops.level2;

public class RecipeRunner {

	public static void main(String[] args) {
		Recipe1 recipe = new Recipe1();
		recipe.execute();

		RecipeWithMicrowave recipeWithMicrowave = new RecipeWithMicrowave();
		recipeWithMicrowave.execute();
	}

}

package com.in28minutes.oops.level2;

public class RecipeWithMicrowave extends AbstractRecipe {

	@Override
	void getReady() {
		System.out.println("Get the raw materials");
		System.out.println("Switch on the microwave");

	}

	@Override
	void doTheDish() {
		System.out.println("get stuff ready");
		System.out.println("Put it in the microwave");
	}

	@Override
	void cleanup() {
		System.out.println("Cleanup the utensils");
		System.out.println("Switch off the microwave");
	}

}

OUTPUT:
Get the raw materials
Get the utensile
do the dish
Cleanup the utensils
Get the raw materials
Switch on the microwave
get stuff ready
Put it in the microwave
Cleanup the utensils
Switch off the microwave



1st:package com.in28minutes.oops.level2.interfaces;

public interface GamingConsole {
    public void up();
    public void down();
    public void left();
    public void right();
    

}
2nd:package com.in28minutes.oops.level2.interfaces;

public class MarioGame implements GamingConsole {

	@Override
	public void up() {
		System.out.println("Jump");

	}

	@Override
	public void down() {
		System.out.println("Goes into a hole");

	}

	@Override
	public void left() {


	}

	@Override
	public void right() {
		System.out.println("Go forword");

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

3rd:package com.in28minutes.oops.level2.interfaces;

public class GameRunner {

	public static void main(String[] args) {
		MarioGame game = new MarioGame();
		game.up();
		game.down();
		game.left();
		game.right();

	}

}

Output:
Jump
Goes into a hole
Go forword


chess:
1st:package com.in28minutes.oops.level2.interfaces;

public class GameRunner {

	public static void main(String[] args) {
		// MarioGame game = new MarioGame();
		ChessGame game = new ChessGame();
		game.up();
		game.down();
		game.left();
		game.right();

	}

}
2nd:package com.in28minutes.oops.level2.interfaces;

public class ChessGame implements GamingConsole {

	@Override
	public void up() {
		System.out.println("Move piece up");

	}

	@Override
	public void down() {
		System.out.println("Move piece down");

	}

	@Override
	public void left() {
		System.out.println("Move piece left");

	}

	@Override
	public void right() {
		System.out.println("Move piece right");

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

Output:
Move piece up
Move piece down
Move piece left
Move piece right



package com.in28minutes.oops.level2.interfaces;

public class GameRunner {

	public static void main(String[] args) {
		GamingConsole game = new ChessGame();
		// GamingConsole game = new ChessGame();
		game.up();
		game.down();
		game.left();
		game.right();

	}

}
Output:
Move piece up
Move piece down
Move piece left
Move piece right


1st:Project wants to outsource an Complex Algorithm

int complexAlgorithm(int number1, int number2);

2nd:
package com.in28minutes.oops.level2.interfaces;

public interface ComplexAlgorithm {
	int complexAlgorithm(int number1,int numer2) {
}

3rd:
package com.in28minutes.oops.level2.interfaces;

public class Project {

	public static void main(String[] args) {
		ComplexAlgorithm algorithm = new DummyAlgorithm();
		System.out.println(algorithm.complexAlgorithm(10, 20));

	}

}

4th:
package com.in28minutes.oops.level2.interfaces;

public class DummyAlgorithm implements ComplexAlgorithm {

	@Override
	public int complexAlgorithm(int number1, int number2) {
		return number1 + number2;
	}
}
Output:
30
